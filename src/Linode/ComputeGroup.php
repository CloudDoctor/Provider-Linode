<?php

namespace CloudDoctor\Linode;

use CloudDoctor\Interfaces\ComputeGroupInterface;

class ComputeGroup extends \CloudDoctor\Common\ComputeGroup implements ComputeGroupInterface
{
    /**
     * Return the number of running, active instances on the upstream provider.
     * @return int
     */
    public function countComputes() : int
    {
        $count = 0;
        foreach($this->getAllLinodeInstances() as $potentialInstance){
            if(in_array($this->getComputeGroupTag(), $potentialInstance->tags)){
                $count++;
            }
        }
        return $count;
    }

    private function getAllLinodeInstances() : array{
        $instances = [];
        $instancesList = $this->getRequest()->getJson("/linode/instances");
        foreach($instancesList->data as $potentialInstance){
            if(in_array($this->getComputeGroupTag(), $potentialInstance->tags)){
                $instances[] = $potentialInstance;
            }
        }
        return $instances;
    }

    public function scaleDown()
    {
        $numberToCull = $this->isScalingRequired() * -1;
        $instancesAvailable = $this->getAllLinodeInstances();
        $instancesAvailable = array_values(array_reverse($instancesAvailable));
        for($i = 0; $i < $numberToCull; $i++){
            $instanceToCull = $instancesAvailable[$i];
            $this->getRequest()->deleteJson("/linode/instances/{$instanceToCull->id}");
        }
    }

    public function scaleUp()
    {
        parent::scaleUp(); // TODO: Change the autogenerated stub
    }
}